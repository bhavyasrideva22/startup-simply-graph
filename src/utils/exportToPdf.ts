
import { CostCategory } from "@/types/calculator";
import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

// Add the jspdf and jspdf-autotable types
declare module "jspdf" {
  interface jsPDF {
    autoTable: typeof autoTable;
  }
}

export const exportToPdf = (
  categorizedCosts: CostCategory[],
  values: Record<string, number>,
  businessName: string
) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  
  // Add header with logo
  doc.setFillColor(36, 94, 79); // #245e4f
  doc.rect(0, 0, pageWidth, 30, "F");
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.text("StartupCalc", 15, 15);
  
  doc.setFontSize(12);
  doc.text("Startup Cost Analysis", 15, 25);
  
  // Add business name and date
  doc.setTextColor(51, 51, 51); // #333333
  doc.setFontSize(18);
  doc.text(`${businessName || 'New Business'} Cost Analysis`, 15, 45);
  
  const today = new Date();
  doc.setFontSize(10);
  doc.text(`Generated on: ${today.toLocaleDateString()}`, 15, 55);
  
  // Add summary
  doc.setFontSize(14);
  doc.text("Cost Summary", 15, 70);
  
  const tableData = [];
  let totalCost = 0;
  
  categorizedCosts.forEach(category => {
    const categoryTotal = category.items.reduce(
      (sum, item) => sum + (values[item.id] || 0), 
      0
    );
    totalCost += categoryTotal;
    
    tableData.push([
      category.title,
      `₹${categoryTotal.toLocaleString('en-IN')}`
    ]);
  });
  
  doc.autoTable({
    startY: 75,
    head: [['Category', 'Amount']],
    body: tableData,
    headStyles: {
      fillColor: [36, 94, 79],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [248, 248, 248]
    },
    margin: { left: 15, right: 15 },
  });
  
  // Add total
  const finalY = (doc as any).lastAutoTable.finalY + 10;
  doc.setFontSize(12);
  doc.text("Total Startup Cost:", 15, finalY);
  doc.setFontSize(14);
  doc.setTextColor(36, 94, 79);
  doc.text(`₹${totalCost.toLocaleString('en-IN')}`, pageWidth - 15, finalY, { align: 'right' });
  
  // Add detailed breakdown
  doc.setTextColor(51, 51, 51);
  doc.setFontSize(14);
  doc.text("Detailed Cost Breakdown", 15, finalY + 20);
  
  let currentY = finalY + 25;
  
  categorizedCosts.forEach(category => {
    // Check if we need a new page
    if (currentY > 250) {
      doc.addPage();
      currentY = 20;
    }
    
    doc.setFontSize(12);
    doc.setTextColor(36, 94, 79);
    doc.text(category.title, 15, currentY);
    currentY += 5;
    
    const detailedData = category.items.map(item => [
      item.label,
      `₹${(values[item.id] || 0).toLocaleString('en-IN')}`
    ]);
    
    doc.autoTable({
      startY: currentY,
      body: detailedData,
      theme: 'grid',
      styles: { fontSize: 10 },
      headStyles: { fillColor: [36, 94, 79] },
      margin: { left: 15, right: 15 },
    });
    
    currentY = (doc as any).lastAutoTable.finalY + 10;
  });
  
  // Add footer
  const pageCount = doc.getNumberOfPages();
  doc.setFontSize(8);
  doc.setTextColor(150, 150, 150);
  
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text(
      'Generated by StartupCalc - www.startupcalc.com', 
      pageWidth / 2, 
      285, 
      { align: 'center' }
    );
    doc.text(
      `Page ${i} of ${pageCount}`, 
      pageWidth - 15, 
      285, 
      { align: 'right' }
    );
  }
  
  // Save the PDF
  doc.save(`${businessName || 'startup'}_cost_analysis.pdf`);
};
